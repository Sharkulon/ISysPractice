// <auto-generated />
using System;
using ISysWebAppBack.DBContext;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace ISysWebAppBack.Migrations
{
    [DbContext(typeof(DBContextWeb))]
    partial class DBContextWebModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("DomainLibBack.Organization.Department", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("SubdivisionCode")
                        .IsRequired()
                        .HasMaxLength(63)
                        .HasColumnType("character varying(63)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(63)
                        .HasColumnType("character varying(63)");

                    b.HasKey("Id");

                    b.ToTable("Departments");
                });

            modelBuilder.Entity("DomainLibBack.Projects.Project", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("ProjectCode")
                        .IsRequired()
                        .HasMaxLength(63)
                        .HasColumnType("character varying(63)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(63)
                        .HasColumnType("character varying(63)");

                    b.HasKey("Id");

                    b.ToTable("Projects");
                });

            modelBuilder.Entity("DomainLibBack.Units.Employee", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<DateOnly?>("BirthDay")
                        .HasColumnType("date");

                    b.Property<string>("Email")
                        .HasMaxLength(63)
                        .HasColumnType("character varying(63)");

                    b.Property<int>("EmployeeCode")
                        .HasColumnType("integer");

                    b.Property<string>("HeadManagerId")
                        .HasColumnType("text");

                    b.Property<string>("IdDepartment")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("IdHeadManager")
                        .HasColumnType("text");

                    b.Property<string>("JobTitle")
                        .IsRequired()
                        .HasMaxLength(63)
                        .HasColumnType("character varying(63)");

                    b.Property<string>("Name")
                        .HasMaxLength(63)
                        .HasColumnType("character varying(63)");

                    b.Property<string>("Patronymic")
                        .HasMaxLength(63)
                        .HasColumnType("character varying(63)");

                    b.Property<string>("Phone")
                        .HasMaxLength(15)
                        .HasColumnType("character varying(15)");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<string>("Surname")
                        .HasMaxLength(63)
                        .HasColumnType("character varying(63)");

                    b.HasKey("Id");

                    b.HasIndex("EmployeeCode")
                        .IsUnique();

                    b.HasIndex("HeadManagerId");

                    b.HasIndex("IdDepartment");

                    b.ToTable("Employees");
                });

            modelBuilder.Entity("DomainLibBack.Utils.EmployeeProject", b =>
                {
                    b.Property<string>("Key")
                        .HasColumnType("text");

                    b.Property<string>("IdEmployee")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("IdProject")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Key");

                    b.HasIndex("IdEmployee");

                    b.HasIndex("IdProject");

                    b.ToTable("EmployeeProjects");
                });

            modelBuilder.Entity("DomainLibBack.Units.Employee", b =>
                {
                    b.HasOne("DomainLibBack.Units.Employee", "HeadManager")
                        .WithMany()
                        .HasForeignKey("HeadManagerId");

                    b.HasOne("DomainLibBack.Organization.Department", "Department")
                        .WithMany("Employees")
                        .HasForeignKey("IdDepartment")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Department");

                    b.Navigation("HeadManager");
                });

            modelBuilder.Entity("DomainLibBack.Utils.EmployeeProject", b =>
                {
                    b.HasOne("DomainLibBack.Units.Employee", "Employee")
                        .WithMany("EmployeeProjects")
                        .HasForeignKey("IdEmployee")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DomainLibBack.Projects.Project", "Project")
                        .WithMany("EmployeeProject")
                        .HasForeignKey("IdProject")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Employee");

                    b.Navigation("Project");
                });

            modelBuilder.Entity("DomainLibBack.Organization.Department", b =>
                {
                    b.Navigation("Employees");
                });

            modelBuilder.Entity("DomainLibBack.Projects.Project", b =>
                {
                    b.Navigation("EmployeeProject");
                });

            modelBuilder.Entity("DomainLibBack.Units.Employee", b =>
                {
                    b.Navigation("EmployeeProjects");
                });
#pragma warning restore 612, 618
        }
    }
}
